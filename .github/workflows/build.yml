name: build

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
    paths:
      - ".github/workflows/build.yml"
      - "3rdparty/**"
      - "cmake/**"
      - "include/**"
      - "source/**"
      - "CMakeLists.txt"

  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/build.yml"
      - "3rdparty/**"
      - "cmake/**"
      - "include/**"
      - "source/**"
      - "CMakeLists.txt"
  workflow_dispatch:

jobs:
  meta:
    uses: ./.github/workflows/meta.yml

  windows:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - name: Windows runner hack
        shell: cmd
        run: |
          dir d:\a
          cd ..
          mkdir C:\MaaFramework
          rmdir MaaFramework
          mklink /j MaaFramework C:\MaaFramework
          dism /Online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /Quiet
          cd .

      - name: Windows runner hack (2)
        uses: al-cheb/configure-pagefile-action@v1.3
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "D:"

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Windows 10 SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.12
        with:
          sdk-version: 22621

      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-windows

      - name: Build MAA
        run: |
          cmake --preset "${{ matrix.arch == 'x86_64' && 'MSVC 2022' || 'MSVC 2022 ARM' }}" -DCMAKE_SYSTEM_VERSION="10.0.22621.0" -DMAADEPS_TRIPLET="maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-windows" -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}'

          cmake --build build --preset "${{ matrix.arch == 'x86_64' && 'MSVC 2022' || 'MSVC 2022 ARM' }} - Release" -j 16

      - name: Install
        shell: bash
        if: always()
        run: |
          cmake --install build --prefix install
          rm -rf install/bin/msvc-debug

          cp -r docs install
          cp README*.md install

          cp -r sample install

          cp -r LICENSE.md install

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MAA-win-${{ matrix.arch }}
          path: "install"

  ubuntu:
    needs: meta
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      # maybe should explicitly update some pkg instead of all?
      - name: Update system
        run: |
          pacman -Syu --noconfirm

      - name: Install dep
        run: |
          pacman -Sy
          pacman -S --noconfirm cmake python ccache ninja git

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # https://github.com/MaaXYZ/MaaFramework/actions/runs/5643408179/job/15285186255
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install cross compile toolchains
        if: ${{ matrix.arch != 'x86_64' }}
        run: |
          pacman -Sy
          pacman -S --noconfirm aarch64-linux-gnu-gcc

      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          remove_stale_cache: false

      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux

      - name: Build MAA
        env:
          CC: ${{ matrix.arch == 'x86_64' && 'ccache gcc' || 'ccache aarch64-linux-gnu-gcc' }}
          CXX: ${{ matrix.arch == 'x86_64' && 'ccache g++' || 'ccache aarch64-linux-gnu-g++' }}
        run: |
          cmake --preset 'NinjaMulti' \
            -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux' \
            -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}'

          cmake --build build --preset 'NinjaMulti - Release' -j 16

      - name: Install
        shell: bash
        if: always()
        run: |
          cmake --install build --prefix install

          cp -r docs install
          cp README*.md install

          cp -r sample install

          cp -r LICENSE.md install

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MAA-linux-${{ matrix.arch }}
          path: "install"

  macos:
    needs: meta
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: aarch64
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dep
        run: |
          brew install cmake ninja
        # ccache?

      - name: Install compiler
        run: |
          brew install llvm@17
        # 17

      - name: Bootstrap MaaDeps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-osx

      - name: Build MAA for x86_64
        if: ${{ matrix.arch == 'x86_64' }}
        env:
          CC: "/usr/local/opt/llvm@17/bin/clang"
          CXX: "/usr/local/opt/llvm@17/bin/clang++"
        run: |
          cmake --preset 'NinjaMulti' \
            -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-osx' \
            -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}'

          cmake --build build --preset 'NinjaMulti - Release' -j 16

      - name: Build MAA for aarch64
        if: ${{ matrix.arch == 'aarch64' }}
        env:
          CC: "/opt/homebrew/opt/llvm@17/bin/clang"
          CXX: "/opt/homebrew/opt/llvm@17/bin/clang++"
        run: |
          cmake --preset 'NinjaMulti' \
            -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-osx' \
            -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}'

          cmake --build build --preset 'NinjaMulti - Release' -j 16

      - name: Install
        shell: bash
        if: always()
        run: |
          cmake --install build --prefix install

          cp -r docs install
          cp README*.md install

          cp -r sample install

          cp -r LICENSE.md install

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MAA-macos-${{ matrix.arch }}
          path: "install"

  nuget_pack:
    needs: [meta, windows, ubuntu, macos]
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGE_ID: Maa.Framework.Runtimes # need ${{ secrets.NuGetAPIKey }}

    steps:
      - uses: nuget/setup-nuget@v1

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: assets

      - name: Nuget Pack
        working-directory: tools/nupkgs
        run: |
          version=${{ needs.meta.outputs.version }}
          nuget pack Maa.Framework.Runtimes.nuspec \
            -Verbosity detailed \
            -Properties "id=$NUGET_PACKAGE_ID;version=${version//-post/};year=$(date +%Y);branch=$(git rev-parse --abbrev-ref HEAD);commit=$(git rev-parse HEAD);root_path=../.."

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MAA-nupkgs
          path: "tools/nupkgs/*.nupkg"

  pip_pack:
    needs: [meta, windows, ubuntu, macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: assets

      - name: Pip Pack
        working-directory: tools/pip_pack
        run: |
          tag=${{ needs.meta.outputs.tag }}
          pip install --upgrade wheel build tomlkit
          python pip_pack.py $tag

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MAA-pip-pkgs
          path: "tools/pip_pack/wheel/*.whl"

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, windows, ubuntu, macos, nuget_pack, pip_pack]
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGE_SOURCE: https://api.nuget.org/v3/index.json # https://apiint.nugettest.org/v3/index.json

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: assets

      - name: Publish Nupkgs
        run: |
          nuget push assets/MAA-nupkgs/*.nupkg \
            -ApiKey ${{ secrets.NuGetAPIKey }} \
            -Source $NUGET_PACKAGE_SOURCE \
            -SkipDuplicate
          rm -r assets/MAA-nupkgs

      - name: Publish Pip Packages
        run: |
          pip install --upgrade twine
          python -m twine upload \
            assets/MAA-pip-pkgs/*.whl \
            --username __token__\
            --password ${{ secrets.PYPI_TOKEN }}
          rm -r assets/MAA-pip-pkgs

      - run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done

      - uses: softprops/action-gh-release@v1
        with:
          files: assets/*.zip
          tag_name: ${{ needs.meta.outputs.tag }}
