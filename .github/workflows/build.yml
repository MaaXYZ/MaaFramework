name: build

on:
    push:
        tags:
            - 'v*'
        branches:
            - '**'
        paths:
            - '.github/workflows/build.yml'
            - '3rdparty/**'
            - 'cmake/**'
            - 'include/**'
            - 'source/**'
            - 'CMakeLists.txt'

    pull_request:
        branches:
            - '**'
        paths:
            - '.github/workflows/build.yml'
            - '3rdparty/**'
            - 'cmake/**'
            - 'include/**'
            - 'source/**'
            - 'CMakeLists.txt'
    workflow_dispatch:
        inputs:
            build_config:
                required: true
                default: 'Debug'
                type: choice
                options:
                    - Debug
                    - RelWithDebInfo
                    - Release

jobs:
    meta:
        uses: ./.github/workflows/meta.yml

    windows:
        needs: meta
        runs-on: windows-latest
        strategy:
            matrix:
                arch: [x86_64]
            fail-fast: false

        steps:
            - name: Windows runner hack
              shell: cmd
              run: |
                  dir d:\a
                  cd ..
                  mkdir C:\MaaFramework
                  rmdir MaaFramework
                  mklink /j MaaFramework C:\MaaFramework
                  dism /Online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /Quiet
                  cd .

            - name: Windows runner hack (2)
              uses: al-cheb/configure-pagefile-action@v1.4
              with:
                  minimum-size: 16GB
                  maximum-size: 16GB
                  disk-root: 'D:'

            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Setup Windows 10 SDK
              uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.2
              with:
                  sdk-version: 26100

            - name: Bootstrap MaaDeps
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-windows

            - uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Use Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Prepare node_modules
              run: |
                  cd source/binding/NodeJS
                  pnpm i
                  cd -

            - name: Build MAA
              run: |
                  cmake --preset "${{ matrix.arch == 'x86_64' && 'MSVC 2022' || 'MSVC 2022 ARM' }}" -DCMAKE_SYSTEM_VERSION="10.0.26100.0" -DMAADEPS_TRIPLET="maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-windows" -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}' -DWITH_NODEJS_BINDING=ON

                  cmake --build build --preset "${{ matrix.arch == 'x86_64' && 'MSVC 2022' || 'MSVC 2022 ARM' }} - ${{ inputs.build_config || needs.meta.outputs.build_config }}" -j 16

            - name: Install
              shell: bash
              if: always()
              run: |
                  cmake --install build --prefix install --config ${{ inputs.build_config || needs.meta.outputs.build_config }}
                  rm -rf install/bin/msvc-debug

                  cp -r docs install
                  cp README*.md install

                  cp -r sample install

                  cp -r LICENSE.md install

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-win-${{ matrix.arch }}
                  path: 'install'

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-win-aarch64
                  path: 'install'

    ubuntu:
        needs: meta
        runs-on: ubuntu-latest
        container: archlinux:base-devel
        strategy:
            matrix:
                arch: [aarch64, x86_64]
            fail-fast: false

        steps:
            # maybe should explicitly update some pkg instead of all?
            - name: Update system
              run: |
                  pacman -Syu --noconfirm

            - name: Install dep
              run: |
                  pacman -Sy
                  pacman -S --noconfirm cmake python ccache ninja git clang

            - uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Use Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            # https://github.com/MaaXYZ/MaaFramework/actions/runs/5643408179/job/15285186255
            - uses: actions/checkout@v4
              with:
                  submodules: true

            # 虽然换成了clang，但是需要gcc提供sysroot
            - name: Install cross compile toolchains
              if: ${{ matrix.arch != 'x86_64' }}
              run: |
                  pacman -Sy
                  pacman -S --noconfirm aarch64-linux-gnu-gcc

            - name: Setup ccache
              uses: Chocobo1/setup-ccache-action@v1
              with:
                  remove_stale_cache: false

            - name: Bootstrap MaaDeps
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux

            - name: Prepare node_modules
              run: |
                  cd source/binding/NodeJS
                  pnpm i
                  cd -

            - name: Build MAA
              env:
                  CC: clang
                  CXX: clang++
                  CFLAGS: ${{ matrix.arch == 'x86_64' && ' ' || '--target=aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu' }}
                  CXXFLAGS: ${{ matrix.arch == 'x86_64' && ' ' || '--target=aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu' }}
              run: |
                  cmake --preset 'NinjaMulti' \
                    -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-linux' \
                    -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}' \
                    -DWITH_NODEJS_BINDING=ON

                  cmake --build build --preset 'NinjaMulti - ${{ inputs.build_config || needs.meta.outputs.build_config }}' -j 16

            - name: Install
              shell: bash
              if: always()
              run: |
                  cmake --install build --prefix install --config ${{ inputs.build_config || needs.meta.outputs.build_config }}

                  cp -r docs install
                  cp README*.md install

                  cp -r sample install

                  cp -r LICENSE.md install

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-linux-${{ matrix.arch }}
                  path: 'install'

    macos:
        needs: meta
        strategy:
            matrix:
                arch: [aarch64, x86_64]
            fail-fast: false
        runs-on: macos-15

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: 16.2

            - name: Install dep
              run: |
                  brew install cmake ninja ccache

            - name: Setup ccache
              uses: Chocobo1/setup-ccache-action@v1
              with:
                  remove_stale_cache: false

            - name: Bootstrap MaaDeps
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-osx

            - uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Use Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Prepare node_modules
              run: |
                  cd source/binding/NodeJS
                  pnpm i
                  cd -

            - name: Build MAA
              run: |
                  cmake --preset 'NinjaMulti' \
                    -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-osx' \
                    -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}' \
                    -DCMAKE_OSX_SYSROOT=macosx \
                    -DWITH_NODEJS_BINDING=ON \
                    -DCMAKE_OSX_ARCHITECTURES='${{ matrix.arch == 'x86_64' && 'x86_64' || 'arm64' }}'

                  cmake --build build --preset 'NinjaMulti - ${{ inputs.build_config || needs.meta.outputs.build_config }}' -j 16

            - name: Install
              shell: bash
              if: always()
              run: |
                  cmake --install build --prefix install --config ${{ inputs.build_config || needs.meta.outputs.build_config }}

                  cp -r docs install
                  cp README*.md install

                  cp -r sample install

                  cp -r LICENSE.md install

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-macos-${{ matrix.arch }}
                  path: 'install'

    android:
        needs: meta
        runs-on: ubuntu-latest
        strategy:
            matrix:
                include:
                    - arch: x86_64
                    - arch: aarch64
            fail-fast: false

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Install Packages
              run: |
                  sudo apt-get update -y
                  sudo apt-get install -y ninja-build python3-pyelftools elfutils patchelf nasm

            - uses: nttld/setup-ndk@v1
              id: setup-ndk
              with:
                  ndk-version: r27c

            - name: Setup ccache
              uses: Chocobo1/setup-ccache-action@v1
              with:
                  remove_stale_cache: false

            - name: Bootstrap MaaDeps
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python3 tools/maadeps-download.py ${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-android

            - name: Build MAA
              run: |
                  cmake --preset 'NinjaMulti' \
                    -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path}}/build/cmake/android.toolchain.cmake \
                    -DANDROID_ABI=${{ matrix.arch == 'x86_64' && 'x86_64' || 'arm64-v8a' }} \
                    -DANDROID_PLATFORM=android-23 \
                    -DMAADEPS_TRIPLET='maa-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}-android' \
                    -DMAA_HASH_VERSION='${{ needs.meta.outputs.tag }}'

                  cmake --build build --preset 'NinjaMulti - ${{ inputs.build_config || needs.meta.outputs.build_config }}' -j 16

            - name: Install
              shell: bash
              if: always()
              run: |
                  cmake --install build --prefix install --config ${{ inputs.build_config || needs.meta.outputs.build_config }}

                  cp -r docs install
                  cp README*.md install

                  cp -r sample install

                  cp -r LICENSE.md install

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-android-${{ matrix.arch }}
                  path: 'install'

    nuget_pack:
        needs: [meta, windows, ubuntu, macos, android]
        runs-on: windows-latest
        steps:
            - uses: nuget/setup-nuget@v2

            - uses: actions/checkout@v4
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - name: Nuget Pack
              working-directory: tools/nupkgs
              shell: bash
              run: |
                  curl -sSOL https://raw.githubusercontent.com/MaaAssistantArknights/design/main/logo/maa-logo_128x128.png
                  version=${{ needs.meta.outputs.version }}
                  for NUSPEC in Maa.Framework.Runtime*.nuspec; do
                    cat Head.nuspec $NUSPEC Tail.nuspec > temp && mv temp $NUSPEC

                    nuget pack $NUSPEC \
                      -Verbosity detailed \
                      -Properties "version=${version//-post/};year=$(date +%Y);branch=$(git rev-parse --abbrev-ref HEAD);commit=$(git rev-parse HEAD);root_path=..\.."
                  done

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-nupkgs
                  path: 'tools/nupkgs/*.nupkg'

    pip_pack:
        needs: [meta, windows, ubuntu, macos, android]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - name: Pip Pack
              run: |
                  tag=${{ needs.meta.outputs.tag }}
                  pip install --upgrade -r tools/pip_pack/requirements.txt
                  python tools/pip_pack/pip_pack.py $tag

            - uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: MAA-pip-pkgs
                  path: 'pip_pack/wheel/*.whl'

    nodejs_pack:
        needs: [meta, windows, ubuntu, macos, android]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Use Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Build wrapper
              run: |
                  cd source/binding/NodeJS/release/maa-node
                  pnpm i
                  npm run build

            - name: Package wrapper
              run: |
                  ASSETS=`pwd`/assets

                  cd source/binding/NodeJS
                  pnpm i
                  npx tsx scripts/pack.ts $ASSETS ${{ needs.meta.outputs.tag }}

            - uses: actions/upload-artifact@v4
              with:
                  name: MAA-nodejs-package
                  path: 'source/binding/NodeJS/release'

    release:
        if: ${{ needs.meta.outputs.is_release == 'true' && github.repository_id == '632024122' }}
        needs: [meta, windows, ubuntu, macos, android, nuget_pack, pip_pack, nodejs_pack]
        runs-on: ubuntu-latest
        env:
            OUTPUT_PUBLISH_FAILED: 'echo "failed=true" >> $GITHUB_OUTPUT && echo "::error::Failed to publish packages"'
            NUGET_PACKAGE_SOURCE: https://api.nuget.org/v3/index.json # https://apiint.nugettest.org/v3/index.json

        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: assets

            - name: Publish Nupkgs
              id: nuget
              run: |
                  dotnet nuget push assets/MAA-nupkgs/*.nupkg \
                    --api-key ${{ secrets.NuGetAPIKey }} \
                    --source $NUGET_PACKAGE_SOURCE \
                    || eval $OUTPUT_PUBLISH_FAILED
                  rm -r assets/MAA-nupkgs

            - name: Publish Pip Packages
              id: pip
              run: |
                  pip install --upgrade twine packaging
                  python -m twine upload \
                    assets/MAA-pip-pkgs/*.whl \
                    --username __token__\
                    --password ${{ secrets.PYPI_TOKEN }} \
                    || eval $OUTPUT_PUBLISH_FAILED
                  rm -r assets/MAA-pip-pkgs

            - uses: MaaXYZ/MaaFramework/.github/actions/publish_nodejs@main
              id: nodejs
              with:
                  access: public
                  token: ${{ secrets.NPM_TOKEN }}
                  on_finished: rm -r assets/MAA-nodejs-package
                  on_publish_failed: ${{ env.OUTPUT_PUBLISH_FAILED }}
              continue-on-error: true

            - run: |
                  cd assets
                  for f in *; do
                    (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
                  done

            - uses: softprops/action-gh-release@v2
              with:
                  files: assets/*.zip
                  tag_name: ${{ needs.meta.outputs.tag }}
                  prerelease: ${{ needs.meta.outputs.is_pre_release == 'true' }}
                  generate_release_notes: true

            - name: Trigger MirrorChyanUploading
              run: |
                  gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
                  gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create issue if failed to release
              if: failure() || steps.nuget.outputs.failed || steps.pip.outputs.failed || steps.nodejs.outputs.failed
              uses: actions-cool/issues-helper@v3
              with:
                  actions: 'create-issue'
                  title: '${{ needs.meta.outputs.tag }} failed to release'
                  body: |
                      Please manually publish the following packages:
                      ${{ steps.nuget.outputs.failed && '- nuget @moomiji' || '' }}
                      ${{ steps.pip.outputs.failed && '- pip @MistEO' || '' }}
                      ${{ steps.nodejs.outputs.failed && '- nodejs @neko-para' || '' }}

                      cc @MistEO
